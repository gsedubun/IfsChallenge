@page "/"
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Protocol
@using System.Collections
@inject IHttpClientFactory clientFactory
@rendermode InteractiveServer

<PageTitle>Candidates</PageTitle>

<div class="row content-fluid">
    <div class="col-md-6">

        <div class="card">
            <div class="card-header">
                <h2>Search candidates</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label>Technology</label>
                    <select class="form-control" @bind="techId">
                        @foreach (var tech in technologies)
                        {
                            <option value="@tech.guid">@tech.name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Years of Experience</label>
                    <input type="number" class="form-control" @bind="yoe" />
                </div>
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Result  @cdIndex of @totalCount candidates
            </div>
            <div class="card-body">

                @if (totalCount == 0)
                {
                    <p>
                        <em>no matching candidates</em>
                    </p>
                }
                else if (cdIndex == totalCount)
                {
                    <em>no more data</em>
                }
                else if (candidates.Count != 0)
                {
                    <label>@showedCandidate.fullName</label>
                    <br />
                    <img src=@showedCandidate.profilePicture alt="@showedCandidate.fullName" />
                    <br />
                    <label>Email : @showedCandidate.email</label>
                    <br />
                    <label>Music Gender : @showedCandidate.favoriteMusicGenre</label>
                    <br />
                    <label>Experience</label>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Technology</th>
                                <th>Years of Experience</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var exp in showedCandidate.experience)
                            {
                                <tr>
                                    <td>@technologies.FirstOrDefault(x=> x.guid==exp.technologyId)?.name</td>
                                    <td>@exp.yearsOfExperience</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>
                        @if (cdIndex > candidates.Count)
                        {
                            <em>no more matching candidates</em>
                        }
                        else
                        {
                            <em>Loading...</em>
                        }
                    </p>

                }
            </div>
            <div class="card-footer">
                <div class="btn-group">
                    <button disabled="@HasNext()" class="btn btn-danger" @onclick="Denied">Reject</button>
                    <button disabled="@HasNext()" class="btn btn-primary" @onclick="Accept">Accept</button>
                </div>
            </div>

        </div>

    </div>

    <div class="col-xs-12">
        <H3> Accepted Candidates</H3>

        <table class="table">
            <thead>
                <tr>
                    <th>Full Name</th>
                    <th>Profile Picture</th>
                    <th>Email</th>
                    <th>Music Genre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var candidate in acceptedCandidates)
                {
                    <tr>
                        <td>@candidate.fullName</td>
                        <td><img src=@candidate.profilePicture /></td>
                        <td>@candidate.email</td>
                        <td>@candidate.favoriteMusicGenre</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private int cdIndex = 0, yoe = 0, totalCount = 0;
    private string techId = "";
    private Candidate? showedCandidate = new Candidate();
    private Stack<Candidate>? candidates = new Stack<Candidate>();
    private List<Technology>? technologies = new List<Technology>();
    private Stack<Candidate> acceptedCandidates = new Stack<Candidate>();
    private HttpClient client;
    private Stack<Candidate> rejectedCandidates= new Stack<Candidate>();

    protected override async Task OnInitializedAsync()
    {

        this.client = clientFactory.CreateClient("EternalBlue");
        var request = new HttpRequestMessage(HttpMethod.Get,
            "technologies");
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            technologies = await JsonSerializer.DeserializeAsync
                <List<Technology>>(responseStream);
        }
        techId = technologies.OrderBy(x => x.name).First().guid;
    }

    private class Candidate
    {
        public string candidateId { get; set; }
        public string fullName { get; set; }
        public string profilePicture { get; set; }
        public string email { get; set; }
        public ICollection<Experience> experience { get; set; }
        public string favoriteMusicGenre { get; set; }
    }

    private class Experience
    {
        private string _technologyId;

        public string technologyId
        {
            get => _technologyId;
            set
            {
                _technologyId = value;
            }
        }

        public Technology technology { get; set; }
        public int yearsOfExperience { get; set; }
    }


    public class Technology
    {
        public string name { get; set; }
        public string guid { get; set; }
    }
    private bool HasNext()
    {
        if (totalCount == 0)
        {
            return true;
        }
        return !(cdIndex < totalCount);
    }
    private void Accept()
    {
        acceptedCandidates.Push(showedCandidate);
        if (cdIndex < totalCount)
        {
            cdIndex++;
            showedCandidate = candidates.Pop();
        }
        StateHasChanged();
    }

    private void Denied()
    {
        rejectedCandidates.Push(showedCandidate);
        if (cdIndex < totalCount)
        {
            cdIndex++;
            showedCandidate = candidates.Pop();
        }

        StateHasChanged();
    }

    private async Task Search()
    {

        List<Candidate> tempCandidates =new List<Candidate>();
        var reqCandidate = new HttpRequestMessage(HttpMethod.Get,
            "candidates");
        var responseCandidate = await client.SendAsync(reqCandidate);
        if (responseCandidate.IsSuccessStatusCode)
        {
            using var responseStream = await responseCandidate.Content.ReadAsStreamAsync();
                tempCandidates = await JsonSerializer.DeserializeAsync
                    <List<Candidate>>(responseStream);
        }
        
        var acceptedIds = acceptedCandidates.Select(x => x.candidateId).ToList();
        var rejectedIds = rejectedCandidates.Select(x => x.candidateId).ToList();
         candidates = new Stack<Candidate>( tempCandidates.Where(x => 
             acceptedIds.All(y => y != x.candidateId) &&
             rejectedIds.All(y => y != x.candidateId) &&
             x.experience.Any(y => y.technologyId == techId && y.yearsOfExperience == yoe))
            .ToList());
        if (candidates.Count > 0)
        {
            totalCount = candidates.Count - 1;
            if (candidates.Count == 1)
                totalCount = 1;
            cdIndex = 0;
            
            showedCandidate = candidates.OrderBy(x => x.fullName).ElementAt(cdIndex);

        }
        StateHasChanged();
    }

}